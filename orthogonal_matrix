/*----------------------------
Name: (Kim gyumin)
Student ID: 2021142013
----------------------------*/



#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#define SIZE 3 // you can change this value

void function1(int a[][SIZE], int b[][SIZE], int c ) {

	for (int i = 0; i < SIZE; i++)
	{
		for (int j = 0; j < SIZE; j++)
		{
			b[i][j] = a[j][i]; 
		}
	}
}

void function2(int a[][SIZE], int b[][SIZE], int c) {

	int d[SIZE][SIZE] = { 0};
	for (int i = 0; i < SIZE; i++)
	{
		for (int j = 0; j < SIZE; j++)
		{
			for (int k = 0; k < SIZE; k++)
			{
				d[i][j] += a[i][k] * b[k][j]; 
			}
		}
	}
	for (int i = 0; i < SIZE; i++)
	{
		for (int j = 0; j < SIZE; j++)
		{
			a[i][j] = d[i][j]; 
			 	
		}
	}

}

void function3(int a[][SIZE], int c) {
	int sum=0; 
	for (int i = 0; i < SIZE; i++)
	{
		for (int j = 0; j < SIZE; j++)
		{
			if (i == j)
			{
				if (a[i][j] == 1)
				{
					sum+= 0; 
				}
				else
				{
					sum += 1; 
				}
			}
			else
			{
				if (a[i][j] == 0)
				{
					sum += 0;
				}
				else
				{
					sum += 1; 
				}
			}
			
		}
	}
	if (sum == 0)
	{
		printf("Orthogonal Matrix");
	}
	else
	{
		printf("Not Orthogonal Matrix");
	}
	
}

int main() {

	int a[SIZE][SIZE];
	int b[SIZE][SIZE] = {0,};
	for (int i = 0; i < SIZE; i++)
	{
		for (int j = 0; j < SIZE; j++)
		{
			scanf("%d", &a[i][j]);

		}
	}

	// declaration & initialization (arrays, variables)
	// get input (scanf)

	function1(a, b, SIZE);
	function2(a, b, SIZE);
	function3(a, SIZE); // three function calls

	return 0;
}






/*

Discussion #1. Complete the code and explain the three functions you created.
Function 1: An integer input to a[i][j] is stored in b[j][i] using a repetition statement. 
(example : a[0][0] -> b[0][0] , a[0][1] -> b[1][0], a[1][0] -> b[0][1], a[1][1] -> b[1][1] when the size of matrix is 2 ) 
Summary : It is a function of finding a transposition matrix using the original matrix.

Function 2:  In Function2 , we use d[i][j]. Suppose the size of matrix is 2. 
When i=0 and j=0, d[0][0] = a[0][0] * b[0][0] + a[0][1] * b[1][0] 
When i=0 and j=1  d[0][1] = a[0][0] * b[0][1] + a[0][1] * b[1][1]
When i=1 and j=0, d[1][0] = a[1][0] * b[0][0] + a[1][1] * b[1][0]
When i=1 and j=1  d[1][1] = a[1][0] * b[0][1] + a[1][1] * b[1][1]

Therefore, d[i][j] is the matrix multiplying a array and b array. 
And store d array value in a array, 
Summary : This function stores the matrix obtained by multiplying the matrix we entered by the transposition of the matrix.

Function 3: In a[i][j], when i = j, a[i][j] is 1 if the a array is an identity matrix . 
So When i = j, if a[i][j] is 1, add 0 to the sum value. If not, add 1 to the sum value. 
When i and j values are different, a[i][j] is 0 if the a array is an identity matrix. 
So if a[i][j] is 0 in this situation, add 0 to the sum value. If not, add 1 to the sum value. 
Finally, if the sum value is 0, The a matrix is an identity matrix. 

Summary: It is a function that checks whether the matrix obtained by matrix multiplication from the second function is a identity matrix.


Discussion #2. Instead of using "#define SIZE", suggest another way to set the size of the matrix.
And compare the advantages and disadvantages of the two methods.
Answer: 1. We can write the size of the matrix expressed in integer numbers where "SIZE" is written.
2. "Using #define SIZE" has the advantage of being able to change the size of a matrix immediately when you want to change it.
Conversely, using the other method I mentioned, there is a disadvantage that it cannot be changed immediately when the size of the matrix is changed.
However, it has the advantage of being able to know the size of the matrix more intuitively.
The method using #define SIZE is difficult to intuitively know the size of the matrix if the code is prolonged.

Discussion #3. Discuss the advantages of writing functions by role rather than writing all codes to the main function.
Answer: It can be called and used immediately when only one function needs to be utilized.
In addition, when writing functions, the main function is simplified and the code is easy to understand.


Discussion #4. Is matrix A (given in page 4) an orthogonal matrix? Run the code you wrote and answer it.
Answer: From the first function, a transpose matrix of A is generated. The transpose matrix b is {{0,1,0},{0,0,1},{1,0,0}} . 
In the second function, multiply the transpose matrix b by the matrix A. The Matrix product is {{1,0,0},{0,1,0},{0,0,1}} . 
In the third function, we examine whether this matrix product is a identity matrix. 
The matrix product of size n is the n Ã— n square matrix with ones on the main diagonal and zeros elsewhere.
Therefore, matrix A is an orthogonal matrix. 



*/
